@inject NavigationManager UriHelper;
@inject DialogService dialogService;
@inject FlightRepository flightRepo;
@inject FlightRequestHandler requestHandler;
@inject GetFlightsConfigService configService;
@inject AMSGetFlightsStatusService flightStatusService;
@inject EventExchange eventExchange;


@implements IDisposable;

<RadzenTabs RenderMode="TabRenderMode.Client" Change="(int  index) => TabChange(index)">
    <Tabs>

        <RadzenTabsItem Text="Reference and Help">
            <HelpAndReferenceComponent />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Configuration">
            <div style="width:calc(100vw - 80px);max-width:calc(100vw - 80px)">
                <div style="grid-column:auto;display:flex;flex-direction:column">
                    <div class="pop-editor-grid" style="row-gap:2px;grid-auto-rows:28px;grid-template-columns:250px 50px 220px 50px 1fr">
                        <div class="li-form-category-title">Global Settings</div>
                        <div class="li-form-title">Allow Annonymous Requests:</div><div><RadzenCheckBox @bind-Value=@config.AllowAnnonymousUsers Change="(bool args) => DataChanged()" /></div>
                        <div class="li-form-title">Allow XML Requests:</div><div><RadzenCheckBox @bind-Value=@config.AllowAMSXFormat Change="(bool args) => DataChanged()" /></div>
                        <div class="li-form-title" style="grid-column:3">Allow JSON Requests:</div><div><RadzenCheckBox style="grid-column:4" @bind-Value=@config.AllowJSONFormat Change="(bool args) => DataChanged()" /></div>
                        <div class="li-form-title">Allow Direct AMS Lookups (Single):</div><div><RadzenCheckBox @bind-Value=@config.EnableDirectAMSLookukOnSingleFlightCacheFailure Change="(bool args) => DataChanged()" /></div>
                        <div class="li-form-title" style="grid-column:3">Allow Direct AMS Lookups (Multi):</div><div><RadzenCheckBox style="grid-column:4" @bind-Value=@config.EnableDirectAMSLookukOnMultiFlightCacheFailure Change="(bool args) => DataChanged()" /></div>
                        <div class="li-form-title"><sup>*</sup> Backward Window In Days:</div><div><RadzenNumeric class="pop-form-body" @bind-Value=@config.BackwardWindowInDays Min="-15" Max="-1" Change="(int args) => DataChanged()" Style="width:70px" /></div>
                        <div class="li-form-title" style="grid-column:3"><sup>*</sup> Forward Window In Days:</div><div><RadzenNumeric class="pop-form-body" @bind-Value=@config.ForewardWindowInDays Min="3" Max="14" Change="(int args) => DataChanged()" Style="width:70px;grid-column:4" /></div>
                        <div class="li-form-title"><sup>*</sup> Chunk Size in Days:</div><div><RadzenNumeric class="pop-form-body" @bind-Value=@config.ChunkSizeInDays Min="1" Max="3" Change="(int args) => DataChanged()" Style="width:70px" /></div>
                        <div class="li-form-title" style="grid-column:3"><sup>*</sup> UTC Offset:</div><div><RadzenNumeric class="pop-form-body" @bind-Value=@config.UTCOffset Change="(double args) => DataChanged()" Step="0.5" Max="12" Min="-12" Style="width:70px;grid-column:4" /></div>
                        <div class="li-form-title" style="grid-column:1"><sup>#</sup> Repository Refresh Cron:</div><div style="grid-column:2/ span 4;font-size:10pt">@config.RefreshCron</div>
                        <div class="li-form-title"><sup>#</sup> Data Provider:</div><div>@config.Storage</div>
                        @if (config.Storage == "SQLite")
                        {
                            <div class="li-form-title"><sup>#</sup> SQLite Storage Directory:</div>
                            <div style="overflow:clip;grid-column:2 / span 4;font-size:10pt">@config.StorageDirectory</div>
                        }
                        @if (config.Storage == "SQL")
                        {
                            <div class="li-form-title"><sup>#</sup>SQL Connection String:</div>
                            <div style="overflow:clip;grid-column:2 /span 4;font-size:10pt">@config.SQLConnectionString</div>
                        }

                        <div class="li-form-title"><sup>##</sup> Configuration File:</div><div style="overflow:clip;grid-column:2 /span 4;font-size:10pt">@config.ConfigurationFile</div>
                    </div>
                    <div style="display:flex;flex-direction:column;gap:2px">
                        <div class="li-form-title" style="grid-column:1 /span 4;margin-top:15px;text-align:left">* Service Restart Required &nbsp;&nbsp; # Edit directly in Configuration File ## Edit directly in appsettings.json file</div>
                    </div>

                    <div style="gap:5px;margin-bottom:10px;margin-top:10px">
                        <RadzenButton Text="Apply Config" Disabled=@DataClean ButtonStyle="ButtonStyle.Success" Click="ApplyConfig" Style="padding-left:4px;padding-right:4px;width:180px;margin-top:5px" />
                        <RadzenButton Text="Save Config to File" Disabled=@UnsavedClean ButtonStyle="ButtonStyle.Success" Click="SaveConfig" Style="padding-left:4px;padding-right:4px;width:180px;margin-top:5px" />
                        <RadzenButton Text="Reload Current Config" Disabled=@DataClean ButtonStyle="ButtonStyle.Success" Click="Reload" Style="padding-left:4px;padding-right:4px;width:180px;margin-top:5px" />
                        <RadzenButton Text="Repopulate Cache"ButtonStyle="ButtonStyle.Danger" Click="RePopulate" Style="padding-left:4px;padding-right:4px;width:180px;margin-top:5px;margin-left:100px" />
                    </div>
                </div>

                <div class="pop-editor-grid" style="row-gap:2px;grid-auto-rows:28px;grid-template-columns:250px 50px 220px 50px 1fr;margin-bottom:10px;margin-top:10px">
                    <div class="li-form-category-title">Users</div>
                </div>
                <UserViewerComponent /> 

                <div class="pop-editor-grid" style="row-gap:2px;grid-auto-rows:28px;grid-template-columns:250px 50px 220px 50px 1fr;margin-bottom:10px;margin-top:20px">
                    <div class="li-form-category-title">Airports</div>
                </div>
                <AirpotViewerComponent />


                <div style="display:grid;grid-template-columns:1fr 1fr;grid-column-gap:10px;margin-top:10px">
                    <div>
                        <div class="pop-editor-grid" style="row-gap:2px;grid-auto-rows:28px;grid-template-columns:250px 50px 220px 50px 1fr;margin-bottom:10px;margin-top:10px">
                            <div class="li-form-category-title">Custom Field Mappings</div>
                        </div>
                        <CustomFieldMappingComponent />
                    </div>
                    <div>
                        <div class="pop-editor-grid" style="row-gap:2px;grid-auto-rows:28px;grid-template-columns:250px 50px 220px 50px 1fr;margin-bottom:10px;margin-top:10px">
                            <div class="li-form-category-title">Additional Query Field Mappings</div>
                        </div>
                        <QueryFieldMappingComponent />
                    </div>
                </div>


            </div>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Webhooks Subscribers">
            <div style="height:calc(100vh - 195px);max-height:calc(100vh - 195px);width:calc(100vw - 80px)">
                <SubscriptionViewerComponent />
            </div>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Log">
            <div style="height:calc(100vh - 195px);max-height:calc(100vh - 195px);width:calc(100vw - 80px)">
                <GetFlightsLogViewerComponent @ref=logViewer />
            </div>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Try It!">
            <TryItComponent />
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {

    private bool initOK = false;
    public string? consoleText = null;

    public List<string> AvailAirports { get; set; } = new List<string>();
    public AirportSource SelectedAirport { get; set; } = new AirportSource();
    public GetFlightsConfig? config;
    public GetFlightsLogViewerComponent? logViewer;
    private string? Result { get; set; }
    private bool DataClean { get; set; } = true;
    private bool UnsavedClean { get; set; } = true;
    private string fileName { get; set; }


    private User SelectedUser { get; set; }
    protected override void OnInitialized()
    {
        try
        {
            config = (GetFlightsConfig)configService.config.Clone();
        }
        catch (Exception)
        {
            config = new GetFlightsConfig();
        }


        foreach (AirportSource apt in config.Airports)
        {
            AvailAirports.Add(apt.AptCode);
        }

        // simpleHTTPService.OnRestAPIEnable += RestServiceRunning;
        eventExchange.OnFlightServiceRunning += FlightServiceRunning;

        var fileTarget = (FileTarget)LogManager.Configuration.FindTargetByName("logfile");
        var logEventInfo = new LogEventInfo { TimeStamp = DateTime.Now };
        fileName = fileTarget.FileName.Render(logEventInfo);

        initOK = true;


    }
    public void TabChange(int index)
    {
        if (index == 3)
        {
            logViewer?.Reload();
        }
    }
    public void NavigateHome()
    {
        UriHelper.NavigateTo("/omnihome");
    }
    public void DataChanged()
    {
        DataClean = false;
        UnsavedClean = false;
        StateHasChanged();
    }
    public void FlightServiceRunning(bool running)
    {
        InvokeAsync(() => StateHasChanged());
    }
    public void RestServiceRunning(bool running)
    {
        InvokeAsync(() => StateHasChanged());
    }
    public void EnableUser(string token)
    {
        config.Users[token].Enabled = true;
        DataChanged();
        StateHasChanged();
    }
    public void DisableUser(string token)
    {
        config.Users[token].Enabled = false;
        DataChanged();
        StateHasChanged();
    }
    public void DeleteQueryParam(string key)
    {
        config.MappedQueryParameters.Remove(key);
        DataChanged();
    }
    public void Update()
    {
        StateHasChanged();
    }
    public void SaveConfig()
    {
        configService.SaveConfig(config);
        UnsavedClean = true;
        StateHasChanged();
    }
    public void Reload()
    {
        config = (GetFlightsConfig)configService.config.Clone();
        DataClean = true;
        UnsavedClean = true;
        StateHasChanged();
    }
    public void Restart()
    {
        //  flightService.Restart();
        StateHasChanged();
    }
    public void ApplyConfig()
    {
        configService.ApplyConfig(config);
        DataClean = true;
        StateHasChanged();
    }
    public void SelectedUserChange(object arg)
    {

        string? userKey = arg as string;
        SelectedUser = config.Users[userKey];
        StateHasChanged();
    }
    public async Task AddUser()
    {

        string userName = (string)await dialogService.OpenAsync<GetUserNameDialog>("Add New User", null, new DialogOptions() { ShowTitle = true, Style = "min-height:auto;min-width:auto;width:700px", CloseDialogOnEsc = false });

        if (userName == null)
        {
            return;
        }
        User nu = (User)config.Users["default"].Clone();
        nu.Token = Guid.NewGuid().ToString();
        nu.Name = userName;
        config.Users.Add(nu.Token, nu);
        DataChanged();
        StateHasChanged();

        dialogService.Alert($"User {userName} Added", "Add User", new AlertOptions() { OkButtonText = "OK" });
    }

    public async Task RePopulate(){

        bool? res = await dialogService.Confirm("Please confirm you wish to repopulate the flight cache. This may impact AMS performace", "Confirm Cache Repopulation");
        if (res.Value){
            await Task.Run(() => { flightStatusService.PopulateFlightCache(); eventExchange.TopStatusMessage($"Completed repopulation of cache"); });
        }
    }

    public void Dispose()
    {
        eventExchange.OnFlightServiceRunning -= FlightServiceRunning;
    }
    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Minimap = new EditorMinimapOptions() { Enabled = false },
                FontSize = 10,
                Find = new EditorFindOptions() { SeedSearchStringFromSelection = true },
                ReadOnly = true,
                ScrollBeyondLastLine = false,
            };
    }

    public class Pair
    {
        public Pair(string p1, string p2)
        {
            P1 = p1;
            P2 = p2;
        }
        public string? P1 { get; set; } = null;
        public string? P2 { get; set; } = null;
    }

}