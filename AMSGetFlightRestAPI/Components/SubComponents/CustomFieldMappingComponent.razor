@inject DialogService dialogService;
@inject GetFlightsConfigService configService;

<div style="display:flex;flex-direction:row;gap:10px;margin-bottom:10px">
    <RadzenButton Icon="add" style="padding-left:4px;padding-right:4px;width:200px" Text="New Mapping" Click="AddMapping" />
    <div style="font-size:9pt;font-style:italic">
        Defines the mappings between unfriendly AMS custom field names, and nice names which appear in the JSON<br />
    </div>
</div>
<RadzenDataGrid @ref="mappingGrid" Data="@mappingItems" TItem="Pair">
    <Columns>
        <RadzenDataGridColumn TItem="Pair" TextAlign="TextAlign.Center" Width="100px">
            <Template Context="data">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@(args => EditMappingRow(data))" @onclick:stopPropagation="true" />
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@(args => DeleteMappingRow(data))" @onclick:stopPropagation="true" />
            </Template>
            <EditTemplate Context="data">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@((args) => SaveMappingRow(data))" />
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Class="my-1 ms-1" Click="@((args) => CancelMappingEdits(data))" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="AMS Custom Field Name" TItem="Pair" Property="P1" TextAlign="TextAlign.Center" Width="180px">
            <EditTemplate Context="data">
                <RadzenTextBox Style="width:100%" @bind-Value="data.P1" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Nice Name" TItem="Pair" Property="P2" TextAlign="TextAlign.Center" Width="180px">
            <EditTemplate Context="data">
                <RadzenTextBox Style="width:100%" @bind-Value="data.P2" />
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {

    private RadzenDataGrid<Pair>? mappingGrid;
    private List<Pair> mappingItems = new();
    private string? mappingRowKey;

    protected override void OnInitialized()
    {
        foreach (KeyValuePair<string, string> kvp in configService.config.CustomFieldToParameter)
        {
            mappingItems.Add(new Pair(kvp.Key, kvp.Value));
        }
    }

    private async void DeleteMappingRow(Pair row)
    {
        bool? res = await dialogService.Confirm("Delete the mapping", "Delete Mapping");

        if (res.Value)
        {
            try
            {
                configService.config.CustomFieldToParameter.Remove(row.P1);
                mappingRowKey = null;
            }

            catch (Exception) { }
        }
        configService.SaveConfig();
        RefreshMappingGrid();
    }
    private void EditMappingRow(Pair row)
    {
        mappingRowKey = row.P1;
        mappingGrid.EditRow(row);
    }
    private void SaveMappingRow(Pair row)
    {
        mappingGrid.CancelEditRow(row);
        configService.config.CustomFieldToParameter.Remove(mappingRowKey);
        configService.config.CustomFieldToParameter.Add(row.P1, row.P2);
        mappingRowKey = null;
        configService.SaveConfig();
        RefreshMappingGrid();

    }
    private void CancelMappingEdits(Pair row)
    {
        mappingRowKey = null;
        mappingGrid.CancelEditRow(row);
    }

    private void RefreshMappingGrid()
    {
        mappingItems.Clear();
        foreach (KeyValuePair<string, string> kvp in configService.config.CustomFieldToParameter)
        {
            mappingItems.Add(new Pair(kvp.Key, kvp.Value));
        }
        mappingGrid.Reload();
    }
    private void AddMapping()
    {
        string keyCore = "AMSCustomFieldName";
        string key = keyCore;
        int idx = 1;
        while (configService.config.CustomFieldToParameter.ContainsKey(key))
        {
            key = $"{keyCore}_{idx}";
            idx++;
        }
        try
        {
            configService.config.CustomFieldToParameter.Add(key, "NiceName");
        }
        catch (Exception)
        {

        }
        configService.SaveConfig();
        RefreshMappingGrid();
        StateHasChanged();
    }

    private class Pair
    {
        public Pair(string p1, string p2)
        {
            P1 = p1;
            P2 = p2;
        }
        public string? P1 { get; set; } = null;
        public string? P2 { get; set; } = null;
    }
}
