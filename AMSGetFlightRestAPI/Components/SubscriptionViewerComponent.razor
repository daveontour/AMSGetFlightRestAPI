@inject EventExchange eventExchange;
@inject SubscriptionManager subscriptionManager;
@inject DialogService DialogService;

@implements IDisposable;

<div style="display:flex;flex-direction:row;gap:10px">
    <RadzenButton Text="New Subscription" Click="AddNewSub" />
    <RadzenButton Text="Reload" Click="Reload" />
</div>
<RadzenDataGrid @ref="subscriptionGrid" AllowColumnResize="true" Data="@items" TItem="Subscription" ColumnWidth="300px" Style="height:600px;margin-bottom:20px">
    <Columns>
        <RadzenDataGridColumn TItem="Subscription" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="180px">
            <Template Context="data">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@(args => EditRow(data))" @onclick:stopPropagation="true" />
                <RadzenButton Icon="content_copy" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@(args => CopyRow(data))" @onclick:stopPropagation="true" />
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@(args => DeleteRow(data))" @onclick:stopPropagation="true" />
            </Template>
            <EditTemplate Context="data">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@((args) => SaveRow(data))" />
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Class="my-1 ms-1" Click="@((args) => CancelEdit(data))" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Enabled" Property="IsEnabled" TextAlign="TextAlign.Center" Width="100px">
            <EditTemplate Context="data">
                <div style="align-content:center;display:inline-block">
                    <RadzenCheckBox @bind-Value="data.IsEnabled" Data="@items" TextProperty="Enabled" ValueProperty="IsEnabled"  />
                </div>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Subscriber Token" Property="SubscriberToken" TextAlign="TextAlign.Left" Width="300px" >
            <EditTemplate Context="data">
                <div style="align-content:center;display:inline-block">
                    <RadzenTextBox @bind-Value="data.SubscriberToken" Data="@items" TextProperty="SubscriberToken" ValueProperty="SubscriberToken" Style="width:300px;height:28px; display: block;" />
                </div>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Subscription ID" Property="SubscriptionID" TextAlign="TextAlign.Left" Width="300px" >
            <EditTemplate Context="data">
                <div style="align-content:center;display:inline-block">
                    <RadzenTextBox @bind-Value="data.SubscriptionID" Data="@items" TextProperty="SubscriptionID" ValueProperty="AuthorizationHeaderName" Style="width:300px;height:28px; display: block;" />
                </div>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Data Type" Property="DataFormat" TextAlign="TextAlign.Center" Width="120px">
            <EditTemplate Context="data">
                <div style="align-content:center;display:inline-block">
                    <RadzenTextBox @bind-Value="data.DataFormat" Data="@items" TextProperty="DataFormat" ValueProperty="DataFormat" Style="width:300px;height:28px; display: block;" />
                </div>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="CallBack URL" Property="CallBackURL">
            <EditTemplate Context="data">
                <div style="align-content:center;display:inline-block">
                    <RadzenTextBox @bind-Value="data.CallBackURL" Data="@items" ValueProperty="CallBackURL" Style="width:300px;height:28px; display: block;" />
                </div>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Valid Until" Property="ValidUntil" TextAlign="TextAlign.Center" Width="250px" >
            <EditTemplate Context="data">
                <div style="align-content:center;display:inline-block">
                    <RadzenDatePicker @bind-Value="data.ValidUntil" Data="@items" TextProperty="ValidUntil" ValueProperty="ValidUntil" Style="width:250px;" />
                </div>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Authorisation Header" Property="AuthorizationHeaderName" TextAlign="TextAlign.Left" Width="200px">
            <EditTemplate Context="data">
                <div style="align-content:center;display:inline-block">
                    <RadzenTextBox @bind-Value="data.AuthorizationHeaderName" Data="@items" ValueProperty="AuthorizationHeaderName" Style="width:300px;" />
                </div>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Authorisation Value" Property="AuthorizationHeaderValue" TextAlign="TextAlign.Left" Width="200px">
            <EditTemplate Context="data">
                <div style="align-content:center;display:inline-block">
                    <RadzenTextBox @bind-Value="data.AuthorizationHeaderValue" Data="@items" TextProperty="Header Value" ValueProperty="AuthorizationHeaderValue" Style="width:300px;height:28px; display: block;" />
                </div>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Airport" Property="AirportIATA" TextAlign="TextAlign.Center" Width="120px">
            <EditTemplate Context="data">
                <div style="align-content:center;display:inline-block">
                    <RadzenTextBox @bind-Value="data.AirportIATA" Data="@items" ValueProperty="AirportIATA" Style="width:120px;" />
                </div>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Airline" Property="AirlineIATA" TextAlign="TextAlign.Center" Width="120px">
            <EditTemplate Context="data">
                <div style="align-content:center;display:inline-block">
                    <RadzenTextBox @bind-Value="data.AirlineIATA" Data="@items" ValueProperty="AirlineIATA" Style="width:120px;" />
                </div>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Arrivals" Property="IsArrival" TextAlign="TextAlign.Center" Width="100px">
            <EditTemplate Context="data">
                <div style="align-content:center;display:inline-block">
                    <RadzenCheckBox @bind-Value="data.IsArrival" Data="@items" TextProperty="Arrival" ValueProperty="IsArrival" />
                </div>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Departures" Property="IsDeparture" TextAlign="TextAlign.Center" Width="100px">
            <EditTemplate Context="data">
                <div style="align-content:center;display:inline-block">
                    <RadzenCheckBox @bind-Value="data.IsDeparture" Data="@items" TextProperty="Departure" ValueProperty="IsDeparture" />
                </div>
            </EditTemplate>
        </RadzenDataGridColumn>
         <RadzenDataGridColumn TItem="Subscription" Title="Last Successful Send" Property="LastSuccess" TextAlign="TextAlign.Center" Width="200px" />
        <RadzenDataGridColumn TItem="Subscription" Title="Consecutive Successful Sends" Property="ConsecutiveSuccessfullCalls" TextAlign="TextAlign.Center" Width="120px" />
        <RadzenDataGridColumn TItem="Subscription" Title="Last Failed Send" Property="LastFailure" TextAlign="TextAlign.Center" Width="200px" />
        <RadzenDataGridColumn TItem="Subscription" Title="Last Error Message" Property="LastError" />
        <RadzenDataGridColumn TItem="Subscription" Title="Consecutive Failed Sends" Property="ConsecutiveUnsuccessfullCalls" TextAlign="TextAlign.Center" Width="120px" />
        <RadzenDataGridColumn TItem="Subscription" Title="Backlog Size" Property="BacklogSize" TextAlign="TextAlign.Center" Width="120px" />
    </Columns>
</RadzenDataGrid>

@code {

    public List<Subscription>? items { get; set; }
    public RadzenDataGrid<Subscription>? subscriptionGrid;
    private Subscription subOg;

    protected override void OnInitialized()
    {
        eventExchange.OnSubscriptionsChanged += SubsChanged;
        eventExchange.OnSubscriptionSend += SubsSend;
        items = subscriptionManager.Subscriptions;
    }

    public void SubsChanged(List<Subscription> subs)
    {
        Reload();
    }
    public void SubsSend()
    {
        items = subscriptionManager.Subscriptions;
        subscriptionGrid?.Reload();
        InvokeAsync(() => StateHasChanged());
    }

    public void Reload()
    {
        items = subscriptionManager.Subscriptions;
        subscriptionGrid?.Reload();
        InvokeAsync(() => StateHasChanged());
    }
    public void Dispose()
    {
        eventExchange.OnSubscriptionsChanged -= SubsChanged;
        eventExchange.OnSubscriptionSend -= SubsSend;
    }

    async Task EditRow(Subscription sub)
    {
        subOg = new Subscription()
            {
                DataFormat = sub.DataFormat,
                SubscriberName = sub.SubscriberName,
                SubscriberToken = sub.SubscriberToken,
                CallBackURL = sub.CallBackURL,
                AirportIATA = sub.AirportIATA,
                AuthorizationHeaderName = sub.AuthorizationHeaderName,
                AuthorizationHeaderValue = sub.AuthorizationHeaderValue,
                IsEnabled = sub.IsEnabled,
                IsDeparture = sub.IsDeparture,
                IsArrival = sub.IsArrival
            };
        await subscriptionGrid.EditRow(sub);
    }
    void  CopyRow(Subscription sub)
    {
        Subscription s = new Subscription() { SubscriberName = sub.SubscriberName, 
            SubscriberToken = sub.SubscriberToken, 
            CallBackURL = sub.CallBackURL,
            AirportIATA = sub.AirportIATA, 
            AuthorizationHeaderName = sub.AuthorizationHeaderName,
            AuthorizationHeaderValue = sub.AuthorizationHeaderValue,
            IsEnabled = false, 
            IsDeparture = sub.IsDeparture, 
            IsArrival = sub.IsArrival
        };
        subscriptionManager.Subscriptions.Add(s);
        subscriptionManager.SaveSubscriptions();
        Reload();
    }
    async void DeleteRow(Subscription sub)
    {
        bool? res = await DialogService.Confirm("Are you sure?", "Delete Subscription", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (res.Value)
        {
            subscriptionManager.Subscriptions.Remove(sub);
            subscriptionManager.SaveSubscriptions();
            Reload();
        }
    }

    void OnUpdateRow(Subscription sub)
    {
    }
    void AddNewSub(){
        Subscription s = new Subscription() {  IsArrival = true, IsDeparture = true, IsEnabled = false, ValidUntil = DateTime.MinValue, MaxHorizonInHours = 0, MinHorizonInHours = 0, AirportIATA = "XXX" };
        subscriptionManager.Subscriptions.Add(s);
        subscriptionManager.SaveSubscriptions();
        Reload();
    }
    async Task SaveRow(Subscription sub)
    {
        await subscriptionGrid.UpdateRow(sub);
        subscriptionManager.SaveSubscriptions();
    }

    void CancelEdit(Subscription sub)
    {
        sub.DataFormat = subOg.DataFormat;
        sub.IsEnabled = subOg.IsEnabled;
        sub.SubscriberName = subOg.SubscriberName;
        sub.SubscriberToken = subOg.SubscriberToken;
        sub.CallBackURL = subOg.CallBackURL;
        sub.AirportIATA = subOg.AirportIATA;
        sub.AuthorizationHeaderName = subOg.AuthorizationHeaderName;
        sub.AuthorizationHeaderValue = subOg.AuthorizationHeaderValue;
        sub.IsDeparture = subOg.IsDeparture;
        sub.IsArrival = subOg.IsArrival;
        subscriptionGrid.CancelEditRow(sub);
    }
}
