@inject EventExchange eventExchange;
@inject SubscriptionManager subscriptionManager;
@inject DialogService DialogService;

@implements IDisposable;

<div style="display:flex;flex-direction:row;gap:10px;margin-bottom:10px">
    <RadzenButton Icon="add" style="padding-left:4px;padding-right:4px;width:200px" Text="New Subscription" Click="AddNewSub" />
    <RadzenButton Icon="sync" style="padding-left:4px;padding-right:4px;width:200px" Text="Reload" Click="Reload" />
</div>
<RadzenDataGrid @ref="subscriptionGrid" AllowColumnResize="true" Data="@items" TItem="Subscription">
    <Columns>
        <RadzenDataGridColumn TItem="Subscription" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="180px">
            <Template Context="data">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@(args => EditRow(data))" @onclick:stopPropagation="true" />
                <RadzenButton Icon="content_copy" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@(args => CopyRow(data))" @onclick:stopPropagation="true" />
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@(args => DeleteRow(data))" @onclick:stopPropagation="true" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Enabled" Property="IsEnabled" TextAlign="TextAlign.Center" Width="70px" />
        <RadzenDataGridColumn TItem="Subscription" Title="Subscriber Token" Property="SubscriberToken" TextAlign="TextAlign.Left" Width="220px">          
            <Template Context="data">
                <div style="font-size:9pt;word-wrap: break-word;width:180px;height:auto;white-space:pre-wrap">@data.SubscriberToken</div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Subscription ID" Property="SubscriptionID" TextAlign="TextAlign.Left" Width="150px">
            <Template Context="data">
                <div style="font-size:9pt;word-wrap: break-word;width:150px;height:auto;white-space:pre-wrap">@data.SubscriptionID</div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Data Type" Property="DataFormat" TextAlign="TextAlign.Center" Width="120px" />
        <RadzenDataGridColumn TItem="Subscription" Title="Last Send" TextAlign="TextAlign.Center" Width="200px">
            <Template Context="data">
                <span style="color:aqua">@GetLatestSuccess(data)</span><br />
                <span style="color:#ff827a">@GetLatestFailure(data)</span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Consecutive Sends" TextAlign="TextAlign.Center" Width="180px">
            <Template Context="data">
                <span style="color:aqua">@data.ConsecutiveSuccessfullCalls</span><br />
                <span style="color:#ff827a">@data.ConsecutiveUnsuccessfullCalls</span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Last Error Message" Width="260px">
            <Template Context="data">
                <div style="font-size:9pt;word-wrap: break-word;width:250px;height:auto;white-space:pre-wrap">@data.LastError</div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Subscription" Title="Backlog Size" Property="BacklogSize" TextAlign="TextAlign.Center" Width="120px" />
    </Columns>
</RadzenDataGrid>

@code {

    public List<Subscription>? items { get; set; }
    public RadzenDataGrid<Subscription>? subscriptionGrid;

    protected override void OnInitialized()
    {
        eventExchange.OnSubscriptionsChanged += SubsChanged;
        eventExchange.OnSubscriptionSend += SubsSend;
        items = subscriptionManager.Subscriptions;
    }

    public void SubsChanged(List<Subscription> subs)
    {
        Reload();
    }
    public void SubsSend()
    {
        items = subscriptionManager.Subscriptions;
        subscriptionGrid?.Reload();
        InvokeAsync(() => StateHasChanged());
    }

    private string GetLatestSuccess(Subscription sub)
    {
        if (sub.LastSuccess.HasValue)
        {
            return sub.LastSuccess.Value.ToString("yyyy-MM-dd hhmm:ss");
        }
        else
        {
            return "-";
        }
    }
    private string GetLatestFailure(Subscription sub)
    {
        if (sub.LastFailure.HasValue)
        {
            return sub.LastFailure.Value.ToString("yyyy-MM-dd hhmm:ss");
        }
        else
        {
            return "-";
        }
    }
    private void Reload()
    {
        items = subscriptionManager.Subscriptions;
        subscriptionGrid?.Reload();
        InvokeAsync(() => StateHasChanged());
    }
    public void Dispose()
    {
        eventExchange.OnSubscriptionsChanged -= SubsChanged;
        eventExchange.OnSubscriptionSend -= SubsSend;
    }

    private async Task EditRow(Subscription sub)
    {
        Subscription subOg = new Subscription()
            {
                DataFormat = sub.DataFormat,
                SubscriberName = sub.SubscriberName,
                SubscriberToken = sub.SubscriberToken,
                CallBackURL = sub.CallBackURL,
                AirportIATA = sub.AirportIATA,
                AuthorizationHeaderName = sub.AuthorizationHeaderName,
                AuthorizationHeaderValue = sub.AuthorizationHeaderValue,
                IsEnabled = sub.IsEnabled,
                IsDeparture = sub.IsDeparture,
                IsArrival = sub.IsArrival,
                ChangeEstimated = sub.ChangeEstimated,
                ChangeResourceBaggageReclaim = sub.ChangeResourceBaggageReclaim,
                ChangeResourceCheckIn = sub.ChangeResourceCheckIn,
                ChangeResourceGate = sub.ChangeResourceGate,
                ChangeResourceStand = sub.ChangeResourceCheckIn,
                MinHorizonInHours = sub.MinHorizonInHours,
                MaxHorizonInHours = sub.MaxHorizonInHours
            };

        Dictionary<string, object> parameters = new();
        parameters.Add("sub", sub);
        var res = await DialogService.OpenAsync<SubscriptionEditorDialog>("Edit Subscription", parameters, new DialogOptions() { Height = "620px", Width = "900px" });
        if (res == null)
        {
            sub.DataFormat = subOg.DataFormat;
            sub.IsEnabled = subOg.IsEnabled;
            sub.SubscriberName = subOg.SubscriberName;
            sub.SubscriberToken = subOg.SubscriberToken;
            sub.CallBackURL = subOg.CallBackURL;
            sub.AirportIATA = subOg.AirportIATA;
            sub.AuthorizationHeaderName = subOg.AuthorizationHeaderName;
            sub.AuthorizationHeaderValue = subOg.AuthorizationHeaderValue;
            sub.IsDeparture = subOg.IsDeparture;
            sub.IsArrival = subOg.IsArrival;
            sub.ChangeEstimated = sub.ChangeEstimated;
            sub.ChangeResourceBaggageReclaim = subOg.ChangeResourceBaggageReclaim;
            sub.ChangeResourceCheckIn = subOg.ChangeResourceCheckIn;
            sub.ChangeResourceGate = subOg.ChangeResourceGate;
            sub.ChangeResourceStand = subOg.ChangeResourceCheckIn;
            sub.MinHorizonInHours = subOg.MinHorizonInHours;
            sub.MaxHorizonInHours = subOg.MaxHorizonInHours;
        }
        else
        {
            subscriptionManager.SaveSubscriptions();
            Reload();
        }
    }
    private void CopyRow(Subscription sub)
    {
        Subscription s = new Subscription()
            {
                SubscriberName = sub.SubscriberName,
                SubscriberToken = sub.SubscriberToken,
                CallBackURL = sub.CallBackURL,
                AirportIATA = sub.AirportIATA,
                DataFormat = sub.DataFormat,
                AuthorizationHeaderName = sub.AuthorizationHeaderName,
                AuthorizationHeaderValue = sub.AuthorizationHeaderValue,
                IsEnabled = false,
                IsDeparture = sub.IsDeparture,
                IsArrival = sub.IsArrival
            };
        subscriptionManager.Subscriptions.Add(s);
        subscriptionManager.SaveSubscriptions();
        Reload();
    }
    private async void DeleteRow(Subscription sub)
    {
        bool? res = await DialogService.Confirm("Are you sure?", "Delete Subscription", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (res.Value)
        {
            subscriptionManager.Subscriptions.Remove(sub);
            subscriptionManager.SaveSubscriptions();
            Reload();
        }
    }
    private void AddNewSub()
    {
        Subscription s = new Subscription() { IsArrival = true, IsDeparture = true, IsEnabled = false, ValidUntil = DateTime.MinValue, MaxHorizonInHours = 0, MinHorizonInHours = 0, AirportIATA = "XXX" };
        subscriptionManager.Subscriptions.Add(s);
        subscriptionManager.SaveSubscriptions();
        Reload();
    }
}
